// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: role.sql

package db

import (
	"context"
)

const createRoles = `-- name: CreateRoles :one

INSERT INTO roles (
  role_name
) VALUES (
  $1
)
RETURNING id, role_name
`

// format command harus  (-- name: <FunctionName> :<querytype>)
func (q *Queries) CreateRoles(ctx context.Context, roleName string) (Roles, error) {
	row := q.db.QueryRowContext(ctx, createRoles, roleName)
	var i Roles
	err := row.Scan(&i.ID, &i.RoleName)
	return i, err
}

const deleteRoles = `-- name: DeleteRoles :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRoles(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoles, id)
	return err
}

const getRoles = `-- name: GetRoles :one
SELECT id, role_name FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoles(ctx context.Context, id int32) (Roles, error) {
	row := q.db.QueryRowContext(ctx, getRoles, id)
	var i Roles
	err := row.Scan(&i.ID, &i.RoleName)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, role_name FROM roles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Roles, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roles
	for rows.Next() {
		var i Roles
		if err := rows.Scan(&i.ID, &i.RoleName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoles = `-- name: UpdateRoles :one
UPDATE roles
  set role_name = $2
WHERE id = $1
RETURNING id, role_name
`

type UpdateRolesParams struct {
	ID       int32  `json:"id"`
	RoleName string `json:"role_name"`
}

func (q *Queries) UpdateRoles(ctx context.Context, arg UpdateRolesParams) (Roles, error) {
	row := q.db.QueryRowContext(ctx, updateRoles, arg.ID, arg.RoleName)
	var i Roles
	err := row.Scan(&i.ID, &i.RoleName)
	return i, err
}
