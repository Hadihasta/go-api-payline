// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  role_id,
  email,
  phone_number,
  name
) VALUES (
  $1, $2, $3,$4
)
RETURNING id, role_id, email, phone_number, name, is_active, created_at, updated_at
`

type CreateUserParams struct {
	RoleID      int64          `json:"role_id"`
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	Name        string         `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.RoleID,
		arg.Email,
		arg.PhoneNumber,
		arg.Name,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListUsersWithRole = `-- name: GetListUsersWithRole :many
SELECT 
  u.id,
  u.role_id,
  r.role_name,
  u.email,
  u.phone_number,
  u.name,
  u.is_active,
  u.created_at,
  u.updated_at
FROM users u
JOIN roles r ON u.role_id = r.id
ORDER BY u.id ASC
`

type GetListUsersWithRoleRow struct {
	ID          int64          `json:"id"`
	RoleID      int64          `json:"role_id"`
	RoleName    string         `json:"role_name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	Name        string         `json:"name"`
	IsActive    sql.NullBool   `json:"is_active"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) GetListUsersWithRole(ctx context.Context) ([]GetListUsersWithRoleRow, error) {
	rows, err := q.db.QueryContext(ctx, getListUsersWithRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListUsersWithRoleRow{}
	for rows.Next() {
		var i GetListUsersWithRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.RoleName,
			&i.Email,
			&i.PhoneNumber,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, role_id, email, phone_number, name, is_active, created_at, updated_at FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, name string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
