// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  phone_number,
  name
) VALUES (
  $1, $2, $3
)
RETURNING id, store_id, role_id, email, phone_number, name, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email       sql.NullString `json:"email"`
	PhoneNumber string         `json:"phone_number"`
	Name        string         `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PhoneNumber, arg.Name)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.RoleID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, store_id, role_id, email, phone_number, name, is_active, created_at, updated_at FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, name string) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.RoleID,
		&i.Email,
		&i.PhoneNumber,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
